/* 
* @Author: caoke
* @Date:   2015-10-13 21:49:54
* @Last Modified by:   gbk
* @Last Modified time: 2016-03-23 16:19:05
*/

'use strict';

var fs = require('fs');
var path = require('path');
var webpack = require('webpack');
var gutil = require('gulp-util');
var spawn = require('cross-spawn');
var UglifyJs = require('uglify-js');
var CleanCss = require('clean-css');
var glob = require('glob');
var ExtractTextPlugin = require('extract-text-webpack-plugin');

var nodeModulesPath = path.join(__dirname, '..', 'node_modules');

function generator(argv) {

    // 输入文件夹
    var sourcePath = argv.src || 'src';

    // 输出文件夹
    var distPath = argv.dist || 'dist';

    // 依赖库的构建
    var libraries = argv.libraries;

    // 构建时是否保留 console.log
    var keepConsole = !!argv.keepconsole;

    return function(force, callback) {
        callback = callback || new Function();
        if (!libraries) {
            return callback();
        }
        if (force) {
            var libToCompile = libraries;
        } else {
            var libToCompile = {};
            for (var key in libraries) {
                var lib = libraries[key];
                try {
                    fs.readFileSync(path.join(distPath, lib.output));
                } catch (e) {
                    try {
                        fs.readFileSync(path.join(sourcePath, 'lib', lib.output));
                    } catch (e) {
                        libToCompile[key] = lib;
                    }
                }
            }
        }
        var entries = {};
        var command = [ 'install' ];
        var hasEntry = false;
        for (var key in libToCompile) {
            var lib = libToCompile[key];
            var name = lib.output.replace(/\.js$/, '');
            var srcFile = entries[name] = './lib__' + name + '.js';
            var srcContent = [ 'window["' + key + '"]={' ];
            for (var comp in lib.mappings) {
                var dep = lib.mappings[comp];
                command.push(dep);
                if (/^@ali\//.test(dep)) {
                    dep = dep.split('@').slice(0, 2).join('@');
                } else {
                    dep = dep.split('@')[0];
                }
                srcContent.push('"' + comp + '":require("' + dep + '"),');
            }
            srcContent.push('};');
            fs.writeFileSync(srcFile, srcContent.join('\n'));
            hasEntry = true;
        }
        if (!hasEntry) {
            return callback();
        }
        console.log('Installing dependencies of libraries...');
        spawn('tnpm-3', argv.skipinstall ? [ '-v' ] : command, {
            stdio: 'inherit'
        }).on('exit', function(code) {
            if (code !== 0) {
                throw new gutil.PluginError('cross-spawn', 'install error');
            }
            console.log('Building libraries...');
            if (entries.tingle && exists(path.join('node_modules', 'tingle-style', 'src', 'tingle.css'))) {
                var requires = [
                    '@import "node_modules/tingle-style/src/tingle.css";'
                ];
                var cssFiles = glob.sync(path.join('**', 'tingle-*', 'src', '*.css'));
                var cssCache = {};
                cssFiles.forEach(function(cssFile) {
                    var parts = cssFile.split('/'); // glob 总是使用 / 作为分隔符
                    var key = parts[parts.length - 3];
                    if (cssFile.indexOf('tingle-style') === -1) {
                        cssCache[key] = cssCache[key] || cssFile;
                    }
                });
                for (var key in cssCache) {
                    requires.push('@import "' + cssCache[key] + '";');
                }
                fs.writeFileSync(entries.tingle + '.css', requires.join('\n'));
                fs.appendFileSync(entries.tingle, '\nrequire("./' + entries.tingle + '.css")');
            }
            if (entries.uxcore && exists(path.join('node_modules', 'uxcore-kuma', 'src', 'variables.less'))) {
                var requires = [
                    '@import "node_modules/uxcore-kuma/src/variables.less";',
                    '@import "node_modules/uxcore-kuma/src/mixins.less";',
                    '@import "node_modules/uxcore-kuma/src/scaffolding.less";',
                    '@import "node_modules/uxcore-kuma/src/grid.less";',
                    '@import "node_modules/uxcore-kuma/src/layout.less";',
                    '@import "node_modules/uxcore-kuma/src/checkbox.less";',
                    '@import "node_modules/uxcore-kuma/src/table.less";',
                    '@import "node_modules/uxcore-kuma/src/button.less";',
                    '@import "node_modules/uxcore-kuma/src/filter.less";',
                    '@import "node_modules/uxcore-kuma/src/loading.less";',
                    '@import "node_modules/uxcore-kuma/src/tiptext.less";',
                    '@import "node_modules/uxcore-kuma/src/card.less";',
                    '@import "node_modules/uxcore-kuma/src/steps.less";'
                ];
                var cssFiles = glob.sync(path.join('**', 'uxcore-*', 'src', '*.less'));
                var cssCache = {};
                cssFiles.forEach(function(cssFile) {
                    var parts = cssFile.split('/'); // glob 总是使用 / 作为分隔符
                    var key = parts[parts.length - 3];
                    if (cssFile.indexOf('uxcore-kuma') === -1) {
                        cssCache[key] = cssCache[key] || cssFile;
                    }
                });
                for (var key in cssCache) {
                    requires.push('@import "' + cssCache[key] + '";');
                }
                fs.writeFileSync(entries.uxcore + '.less', requires.join('\n'));
                fs.appendFileSync(entries.uxcore, '\nrequire("./' + entries.uxcore + '.less")');
            }
            webpack({
                entry: entries,
                output: {
                    path: distPath,
                    filename: '[name].js'
                },
                plugins: [
                    new webpack.SourceMapDevToolPlugin({
                        columns: false
                    }),
                    new webpack.optimize.DedupePlugin(),
                    new ExtractTextPlugin('[name].css')
                ],
                resolveLoader: {
                    modulesDirectories: [
                        nodeModulesPath,
                        'node_modules'
                    ]
                },
                externals: {
                    'react': 'window.React',
                    'react-dom': 'window.ReactDOM || window.React'
                },
                module: {
                    loaders: [
                        {
                            test: /\.jsx?$/,
                            loader: 'babel',
                            exclude: function (path) { // 排除 uxcore/tingle 以外的 modules
                                var isNpmModule = !!path.match(/node_modules/);
                                var isLib = !!path.match(/node_modules[\/\\](@ali[\/\\])?(uxcore|tingle)/);
                                return isNpmModule && !isLib;
                            },
                            query: {
                                plugins: [
                                    path.join(nodeModulesPath, 'babel-plugin-add-module-exports')
                                ],
                                presets: [
                                    path.join(nodeModulesPath, 'babel-preset-es2015'),
                                    path.join(nodeModulesPath, 'babel-preset-stage-0'),
                                    path.join(nodeModulesPath, 'babel-preset-react')
                                ]
                            }
                        }, {
                            test: /\.css$/,
                            loader: ExtractTextPlugin.extract('style-loader', 'css-loader')
                        }, {
                            test: /\.less$/,
                            loader: ExtractTextPlugin.extract('style-loader', 'css-loader!less-loader')
                        }, {
                            test: /\.styl$/,
                            loader: ExtractTextPlugin.extract('style-loader', 'css-loader!stylus-loader')
                        }, {
                            test: /\.svg$/,
                            loader: 'url'
                        }
                    ]
                }
            }, function(err, stats) {
                if(err) {
                    throw new gutil.PluginError('webpack', err);
                }
                gutil.log('[webpack]', stats.toString({
                    hash: false,
                    chunks: false,
                    children: false
                }));
                stats.toJson({
                    hash: false,
                    chunks: false,
                    children: false
                }).assets.forEach(function(n) {
                    var file = path.join(distPath, n.name);
                    var minFile = file.replace(/.js$/, '.min.js').replace(/.css$/, '.min.css');
                    if (/\.js$/.test(file)) {
                        console.log('Minify file: ' + file);
                        var result = UglifyJs.minify(file, {
                            compress: {
                                warnings: false,
                                drop_console: !keepConsole
                            },
                            comments: false
                        });
                        fs.writeFileSync(minFile, result.code);
                    } else if (/\.css$/.test(file)) {
                        console.log('Minify file: ' + file);
                        var result = new CleanCss({
                            keepSpecialComments: 0,
                            compatibility: true,
                            advanced: false,
                            processImport: true
                        }).minify(fs.readFileSync(file, 'utf-8'));
                        fs.writeFileSync(minFile, result.styles);
                    }
                    if (force) {
                        try {
                            fs.mkdirSync(path.join(sourcePath, 'lib'));
                        } catch (e) {
                        }
                        try {
                            var libFile = path.join(sourcePath, 'lib', n.name);
                            var libMinFile = libFile.replace(/.js$/, '.min.js').replace(/.css$/, '.min.css');
                            fs.writeFileSync(libFile, fs.readFileSync(file));
                            fs.writeFileSync(libMinFile, fs.readFileSync(minFile));
                        } catch (e) {
                        }
                    }
                });
                callback();
            });
        });
    }
}

function exists(file) {
    try {
        fs.accessSync(file);
        return true;
    } catch (e) {
        return false;
    }
}

module.exports = generator;
