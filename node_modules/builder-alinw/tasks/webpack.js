/* 
* @Author: caoke
* @Date:   2015-06-10 10:14:35
* @Last Modified by:   gbk
* @Last Modified time: 2016-03-22 20:47:06
*/

"use strict";

var fs = require('fs');
var os = require('os');
var path = require('path');
var cp = require('child_process');

var gulp = require('gulp');
var gutil = require('gulp-util');

var webpack = require('webpack');
var ExtractTextPlugin = require('extract-text-webpack-plugin');

var getPackLib = require('../lib/packLib');
var yargs = require('yargs');

var argv = yargs.argv;
var packLib = getPackLib(argv);

// 输入输出文件夹
var sourcePath = argv.src || 'src';
var distPath = argv.dist || 'dist';

var absSourcePath = path.join(process.cwd(), sourcePath);
var nodeModulesPath = path.join(__dirname, '..', 'node_modules');

// 环境判断 dev or pro
var env = /daily\//.test(argv.branch) ? 'dev' : 'pro';

// 是否要把每个页面分别作为入口 true or false
var isPages = !!argv.pages;

// require 中嵌入的变量
var vars = argv.vars || {};

// 是否需要国际化的标记，默认 true，如果找不到资源文件则改为 false。
var needI18n = !argv.ignorei18n;

// 构建时是否保留 console.log
var keepConsole = !!argv.keepconsole;

// 是否已经有一个 pack 任务在跑了？
var hasPackRun = false;

// 嵌入外部变量
var externals = argv.externals || {
    'react': 'window.React',
    'react-dom': 'window.ReactDOM || window.React'
};

function findPages(cb) {
    var pages = fs.readdirSync(path.join(sourcePath, 'pages'));
    pages.forEach(function(page) {
        if (fs.lstatSync(path.join(sourcePath, 'pages', page)).isDirectory()) {
            cb(page);
        }
    });
}

function pack(vars, cb) {
    var entries = {
        app: './' + path.join(sourcePath, 'app', 'app.js')
    };
    if (isPages) {
        findPages(function(page) {
            entries[page] = [
                './' + path.join(sourcePath, 'pages', page, 'index.js')
            ];
        });
    }
    var output = {
        path: distPath,
        filename: needI18n ? '[name]-' + vars.locale + '.js' : '[name].js',
        publicPath: './'
    };
    var compiler = {
        entry: entries,
        output: output,
        plugins: [
            new webpack.optimize.OccurenceOrderPlugin(),
            new webpack.DefinePlugin({
                __LOCAL__: env == 'local',
                __DEV__: env == 'dev',
                __PRO__: env == 'pro'
            }),
            new webpack.NormalModuleReplacementPlugin(/\{(.+)\}/, function(result) {
                // 替换 vars 变量
                result.request = result.request.replace(/\{(.+?)\}/g, function(p, p1) {
                    return (p1 in vars) ? vars[p1] : '';
                });
            }),
            new ExtractTextPlugin('[name].css')
        ],
        resolve: {
            modulesDirectories: [
                'tingle', // tingle submodules
                'node_modules',
                nodeModulesPath
            ],
            alias: {
                // 定义 i18n 别名，使任何文件都能以相同的路径引用到 i18n 模块
                i18n: path.join(absSourcePath, 'i18n')
            }
        },
        resolveLoader: {
            modulesDirectories: [
                nodeModulesPath,
                'node_modules'
            ]
        },
        externals: externals,
        module: {
            loaders: [{
                test: /\.jsx?$/,
                loader: 'babel',
                include: absSourcePath,
                query: {
                    plugins: [
                        path.join(nodeModulesPath, 'babel-plugin-add-module-exports'),
                        path.join(nodeModulesPath, 'babel-plugin-transform-es3-member-expression-literals')
                    ],
                    presets: [
                        path.join(nodeModulesPath, 'babel-preset-es2015'),
                        path.join(nodeModulesPath, 'babel-preset-stage-0'),
                        path.join(nodeModulesPath, 'babel-preset-react')
                    ]
                }
            }, {
                test: /\.css$/,
                loader: hasPackRun ? 'export-css?remove=true&write=false!css' : ExtractTextPlugin.extract('style-loader', 'css-loader'),
                include: absSourcePath
            }, {
                test: /\.less$/,
                loader: hasPackRun ? 'export-css?remove=true&write=false!css!less' : ExtractTextPlugin.extract('style-loader', 'css-loader!less-loader'),
                include: absSourcePath
            }, {
                test: /\.styl$/,
                loader: hasPackRun ? 'export-css?remove=true&write=false!css!stylus' : ExtractTextPlugin.extract('style-loader', 'css-loader!stylus-loader'),
                include: absSourcePath
            }, {
                test: /\.svg$/,
                loader: 'babel',
                include: absSourcePath,
                query: {
                    presets: [
                        path.join(nodeModulesPath, 'babel-preset-es2015'),
                        path.join(nodeModulesPath, 'babel-preset-stage-0'),
                        path.join(nodeModulesPath, 'babel-preset-react')
                    ]
                }
            }, {
                test: /\.svg$/,
                loader: 'svg2react',
                include: absSourcePath
            }, {
                test: /\.json$/,
                loader: 'json',
                include: absSourcePath
            }, {
                test: /\.(png|jpe?g|gif)$/,
                loader: 'url?limit=10240',
                include: absSourcePath
            }]
        }
    };
    hasPackRun = true;
    webpack(compiler, function(err, stats) {
        if (err) {
            throw new gutil.PluginError('webpack', err);
        }
        gutil.log('[webpack]', stats.toString({
            hash: false,
            chunks: false,
            children: false
        }));

        // 并发处理压缩任务
        var json = stats.toJson({
            hash: false,
            chunks: false,
            children: false,
            modules: false
        });
        var tasks = [];
        var length = Math.min(os.cpus().length, json.assets.length);
        for (var i = 0; i < length; i++) {
            tasks.push([]);
        }
        var cur = 0;
        json.assets.forEach(function(a) {
            tasks[cur].push(path.join(output.path, a.name));
            cur = (cur + 1) % length;
        });
        tasks.forEach(function(files) {
            var n = cp.fork(path.join(__dirname, '..', 'lib', 'minify.js'));
            n.on('exit', function() {
                !(--length) && cb();
            });
            n.send({
                files: files,
                keepConsole: keepConsole
            });
        });
    });
}

try {
    var tasks = [];
    var langs = fs.readdirSync(path.join(absSourcePath, 'i18n'));
    langs.forEach(function(lang) {
        // 语言码检测
        if (/^[a-z]{2}([\-_][A-Za-z]{2})?\.js(on)?$/.test(lang)) {
            lang = lang.split('.')[0];
            tasks.push(lang);
            gulp.task(lang, function(cb) {
                var nVars = {};
                for (var v in vars) {
                    nVars[v] = vars[v];
                }
                nVars.locale = lang;
                pack(nVars, cb);
            });
        }
    });
    if (tasks.length) {
        gulp.task('pack', tasks);
    } else {
        throw 'No i18n resource found.'
    }
} catch(e) {
    needI18n = false;
    gulp.task('pack', function(cb) {
        var nVars = {};
        for (var v in vars) {
            nVars[v] = vars[v];
        }
        delete nVars.locale;
        pack(nVars, cb);
    });
}

gulp.task('copy', function() {
    return gulp.src([
        path.join(sourcePath, 'lib', '*.*'),
        path.join(sourcePath, '..', 'html', '**', '*.*')
    ]).pipe(gulp.dest(distPath));
});

gulp.task('install', function(cb) {
    cp.spawn('tnpm-3', [
        'install'
    ]).on('exit', cb);
});

gulp.task('pack_lib', function(cb) {
    packLib(false, cb);
});

gulp.task('default', [ 'install', 'copy', 'pack_lib' ], function() {
    gulp.run('pack');
});

module.exports = gulp;
